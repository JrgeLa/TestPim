<?php


namespace TheAkademy\APIBundle\Command\Product\Export\Csv;

use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Akeneo\PimEnterprise\ApiClient\AkeneoPimEnterpriseClientBuilder;
use Box\Spout\Reader\ReaderFactory;
use Box\Spout\Common\Type;

class ProductImportCommand extends Command
{
    const FILE_PATH = __DIR__.'/import.csv';
    protected static $defaultName = 'pim:products:import-csv';
    protected $clientId = '1_4sroh3920so4g0woc8wkw8kos0cook8so8gsk4oo840wkwoo08';
    protected $secret = '4z411u1pqa8s8gcwwkcggogoogs8go0s80cso40ss08sgko8co';
    protected $user = 'admin';
    protected $password = 'admin';
    protected $token = '';
    protected $refreshToken = '';

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $client = $this->getClient();
        $this->setToken($client);

        // parent::execute($input, $output); // TODO: Change the autogenerated stub
    }

    private function getClient()
    {
        $clientBuilder = new AkeneoPimEnterpriseClientBuilder('http://httpd:80');

        if (!empty($this->token)) {
            return $clientBuilder->buildAuthenticatedByToken(
                $this->clientId,
                $this->secret,
                $this->token,
                $this->refreshToken
            );
        }

        return $clientBuilder->buildAuthenticatedByPassword(
            $this->clientId,
            $this->secret,
            $this->user,
            $this->password
        );
    }

    private function setToken(AkeneoPimEnterpriseClientBuilder $client)
    {
        $this->token = $client->getToken();
        $this->refreshToken = $client->getRefreshToken();
    }

    private function importCsv($products)
    {
        $reader = ReaderFactory::create(Type::CSV);
        $reader->setFieldDelimiter('|');
        $reader->setFieldEnclosure('@');
        $reader->setEndOfLineCharacter("\r");
        $reader->open(self::FILE_PATH);

        foreach ($reader->getSheetIterator() as $sheet) {
            foreach ($sheet->getRowIterator() as $index => $row) {
                // $product = $this->convert($row);
            }
        }

        $reader->close();
    }

    private function convert($item, $options = [])
    {

    }
}