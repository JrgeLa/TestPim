<?php


namespace TheAkademy\APIBundle\Command\Product\Export\Csv;

use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Akeneo\PimEnterprise\ApiClient\AkeneoPimEnterpriseClientBuilder;
use Box\Spout\Writer\WriterFactory;
use Box\Spout\Common\Type;

class ProductExportCommand extends Command
{
    const FILE_PATH = __DIR__.'/export.csv';
    protected static $defaultName = 'pim:products:export-csv';
    protected $clientId = '1_4sroh3920so4g0woc8wkw8kos0cook8so8gsk4oo840wkwoo08';
    protected $secret = '4z411u1pqa8s8gcwwkcggogoogs8go0s80cso40ss08sgko8co';
    protected $user = 'admin';
    protected $password = 'admin';
    protected $token = '';
    protected $refreshToken = '';

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $client = $this->getClient();
        $this->setToken($client);
        // $searchBuilder = new \Akeneo\Pim\ApiClient\Search\SearchBuilder();
        // $searchBuilder->addFilter('enabled', '=', true);
        // $searchFilters = $searchBuilder->getFilters();

        // $firstPage = $client->getProductApi()->listPerPage(50, true, ['search' => $searchFilters]);

        // $output->writeln($firstPage->getCount());

        // parent::execute($input, $output); // TODO: Change the autogenerated stub
    }

    private function getClient()
    {
        $clientBuilder = new AkeneoPimEnterpriseClientBuilder('http://httpd:80');

        if (!empty($this->token)) {
            return $clientBuilder->buildAuthenticatedByToken(
                $this->clientId,
                $this->secret,
                $this->token,
                $this->refreshToken
            );
        }

        return $clientBuilder->buildAuthenticatedByPassword(
            $this->clientId,
            $this->secret,
            $this->user,
            $this->password
        );
    }

    private function setToken(AkeneoPimEnterpriseClientBuilder $client)
    {
        $this->token = $client->getToken();
        $this->refreshToken = $client->getRefreshToken();
    }

    private function getProducts()
    {
        $searchBuilder = new \Akeneo\Pim\ApiClient\Search\SearchBuilder();
        $searchBuilder->addFilter('enabled', '=', true);
        $searchFilters = $searchBuilder->getFilters();

        return $client->getProductApi()->all(50, ['search' => $searchFilters]);
    }

    private function writeCsv($products)
    {
        $writer = WriterFactory::create(Type::CSV);

        $writer->openToFile($filePath); // write data to a file or to a PHP stream
        // $writer->openToBrowser($fileName); // stream data directly to the browser

        foreach ($products as $product) {
            $product = $this->transformProduct($product);
            $writer->addRow($product);
        }

        // $writer->addRow($singleRow); // add a row at a time
        // $writer->addRows($multipleRows); // add multiple rows at a time

        $writer->close();
    }

    private function transformProduct($product)
    {
        $productArray = [
            'sku' => $product['identifier'],
            'categories' => '',
            'familie' => $product['family'],
            'description-en_US-ecomerce' => '',
        ];

        if (isset($product['categories'])) {
            $productArray['categories'] = implode(',', $product['categories']);
        }

        if (isset($product['values']['desccription'])) {
            foreach ($product['values']['desccription'] as $desccription){
                if('en_US' === $description['locale'] && 'ecommerce' === $desccription['scope']) {
                    $productArray['description-en_US-ecomerce'] .= $description['data'];
                }
            }
        }

        return $productArray;
    }
}